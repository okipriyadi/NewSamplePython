Static files in Django

Finally we will take a closer look at these things we've been calling static files. Static files are all your CSS and images. Their content doesn't depend on the request context and will be the same for every user.

Where to put static files for Django

Django already knows where to find the static files for the built-in "admin" app. Now we just need to add some static files for our own app, blog.

We do that by creating a folder called static inside the blog app:

djangogirls
├── blog
│   ├── migrations
│   └── static
└── mysite
Django will automatically find any folders called "static" inside any of your apps' folders. Then, it will be able to use their contents as static files.

Your first CSS file!

Let's create a CSS file now, to add your own style to your web-page. Create a new directory called css inside your static directory. Then create a new file called blog.css inside this css directory. Ready?

djangogirls
└─── blog
     └─── static
          └─── css
               └─── blog.css
Time to write some CSS! Open up the blog/static/css/blog.css file in your code editor.

We won't be going too deep into customizing and learning about CSS here. It's pretty easy and you can learn it on your own after this workshop. There is a recommendation for a free course to learn more at the end of this page.

But let's do at least a little. Maybe we could change the color of our header? To understand colors, computers use special codes. These codes start with # followed by 6 letters (A-F) and numbers (0-9). For example, the code for blue is #0000FF. You can find the color codes for many colors here: http://www.colorpicker.com/. You may also use predefined colors, such as red and green.

In your blog/static/css/blog.css file you should add the following code:

h1 a {
    color: #FCA205;
}
h1 a is a CSS Selector. This means we're applying our styles to any a element inside of an h1 element. So when we have something like: <h1><a href="">link</a></h1> the h1 a style will apply. In this case, we're telling it to change its color to #FCA205, which is orange. Of course, you can put your own color here!

In a CSS file we determine styles for elements in the HTML file. The first way we identify elements is with the element name. You might remember these as tags from the HTML section. Things like a, h1, and body are all examples of element names. We also identify elements by the attribute class or the attribute id. Class and id are names you give the element by yourself. Classes define groups of elements, and ids point to specific elements. For example, you could identify the following tag by using the tag name a, the class external_link, or the id link_to_wiki_page:

<a href="http://en.wikipedia.org/wiki/Django" class="external_link" id="link_to_wiki_page">
Read about CSS Selectors in w3schools.

Then, we need to also tell our HTML template that we added some CSS. Open the blog/templates/blog/post_list.html file and add this line at the very beginning of it:

{% load staticfiles %}
We're just loading static files here :). Between the <head> and </head>, after the links to the Bootstrap CSS files add this line:

<link rel="stylesheet" href="{% static 'css/blog.css' %}">
The browser reads the files in the order they're given, so we need to make sure this is in the right place. Otherwise the code in our file may override code in Bootstrap files. We just told our template where our CSS file is located.

Your file should now look like this:

{% load staticfiles %}
<html>
    <head>
        <title>Django Girls blog</title>
        <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
        <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css">
        <link rel="stylesheet" href="{% static 'css/blog.css' %}">
    </head>
    <body>
        <div>
            <h1><a href="/">Django Girls Blog</a></h1>
        </div>

        {% for post in posts %}
            <div>
                <p>published: {{ post.published_date }}</p>
                <h1><a href="">{{ post.title }}</a></h1>
                <p>{{ post.text|linebreaks }}</p>
            </div>
        {% endfor %}
    </body>
</html>
OK, save the file and refresh the site!