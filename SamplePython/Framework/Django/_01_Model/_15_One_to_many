class Comment(models.Model):
	post = models.ForeignKey(Post, related_name='comments')
	name = models.CharField(max_length=80)
	email = models.EmailField()
	body = models.TextField()
	created = models.DateTimeField(auto_now_add=True)
	updated = models.DateTimeField(auto_now=True)
	active = models.BooleanField(default=True)

	class Meta:
		ordering = ('created',)
	
	def __str__(self):
		return 'Comment by {} on {}'.format(self.name, self.post)
		
		
It contains a ForeignKey to associate the comment with a single post.
The related_name attribute allows us to name the attribute that we use
for the relation from the related object back to this one. After defining this, we can
retrieve the post of a comment object using comment.post and retrieve all comments
of a post using post.comments.all() . If you don't define the related_name
attribute, Django will use the undercase name of the model followed by _ set
(that is, comment_set ) to name the manager of the related object back to this one.