class Publisher(models.Model):
	name = models.CharField(max_length=30)
	address = models.CharField(max_length=50)
	city = models.CharField(max_length=60)
	state_province = models.CharField(max_length=30)
	country = models.CharField(max_length=50)
	website = models.URLField()
	
	def __str__(self):
		return self.name

class Author(models.Model):
	first_name = models.CharField(max_length=30)
	last_name = models.CharField(max_length=40)
	email = models.EmailField()
	
	def __str__(self):
		return '%s %s' % (self.first_name, self.last_name)

class Book(models.Model):
	title = models.CharField(max_length=100)
	authors = models.ManyToManyField(Author)
	publisher = models.ForeignKey(Publisher)
	publication_date = models.DateField()
	
	def __str__(self):
		return self.title
		
		
ACCESSING FOREIGN KEY VALUES
=============================

When you access a field that’s a ForeignKey , you’ll get the related model object. For
example:
=======================================================
	>>> b = Book.objects.get(id=50)
	>>> b.publisher
	<Publisher: Apress Publishing>
	>>> b.publisher.website
	'http://www.apress.com/'
=======================================================


With ForeignKey fields, it works the other way, too, but it’s slightly different due to the non-
symmetrical nature of the relationship. To get a list of books for a given publisher, use
publisher.book_set.all() , like this:
=================================================================================
	>>> p = Publisher.objects.get(name='Apress Publishing')
	>>> p.book_set.all()
	[<Book: The Django Book>, <Book: Dive Into Python>, ...]
=================================================================================


Behind the scenes, book_set is just a QuerySet (as covered in Chapter 4), and it can be
filtered and sliced like any other QuerySet . For example:
=================================================================================
	>>> p = Publisher.objects.get(name='Apress Publishing')
	>>> p.book_set.filter(title__icontains='django')
	[<Book: The Django Book>, <Book: Pro Django>]
=================================================================================


ACCESSING MANY-TO-MANY VALUES
-----------------------------
Many-to-many values work like foreign-key values, except we deal with QuerySet values
instead of model instances. For example, here’s how to view the authors for a book:
=================================================================================================
>>> b = Book.objects.get(id=50)
>>> b.authors.all()
[<Author: Adrian Holovaty>, <Author: Jacob Kaplan-Moss>]
>>> b.authors.filter(first_name='Adrian')
[<Author: Adrian Holovaty>]
>>> b.authors.filter(first_name='Adam')
[]
=================================================================================================
It works in reverse, too. To view all of the books for an author, use author.book_set , like
this:
=================================================================================================
>>> a = Author.objects.get(first_name='Adrian', last_name='Holovaty')
>>> a.book_set.all()
[<Book: The Django Book>, <Book: Adrian's Other Book>]
=================================================================================================
Here, as with ForeignKey fields, the attribute name book_set is generated by appending the
lower case model name to "_set".

