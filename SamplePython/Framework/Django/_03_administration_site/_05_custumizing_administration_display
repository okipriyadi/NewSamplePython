Edit the admin.py file of your blog application and change it into this:

=========================================================++
from django.contrib import admin
from .models import Post

class PostAdmin(admin.ModelAdmin):
	list_display = ('title', 'slug', 'author', 'publish', 'status')

admin.site.register(Post, PostAdmin)
=========================================================++

Let's customize the admin model with some more options, using the following code:
=========================================================++
class PostAdmin(admin.ModelAdmin):
	list_display = ('title', 'slug', 'author', 'publish', 'status')
	list_filter = ('status', 'created', 'publish', 'author')
	search_fields = ('title', 'body')
	prepopulated_fields = {'slug': ('title',)}
	raw_id_fields = ('author',)
	date_hierarchy = 'publish'
	ordering = ['status', 'publish']
=========================================================++

You can see that the fields displayed on the post list page are the ones you specified
in the list_display attribute. The list page now includes a right sidebar that
allows you to filter the results by the fields included in the list_filter attribute.
A search bar has appeared on the page. This is because we have defined a list of
searchable fields using the search_fields attribute. Just below the search bar, there
is a bar to navigate quickly through a date hierarchy. This has been defined by the
date_hierarchy attribute. You can also see that the posts are ordered by Status
and Publish columns by default. You have specified the default order using the
ordering attribute.
Now click on the Add post link. You will also see some changes here. As you
type the title of a new post, the slug field is filled automatically. We have told
Django to prepopulate the slug field with the input of the title field using the
prepopulated_fields attribute. Also, now the author field is displayed with a
lookup widget that can scale much better than a dropdown select input when you
have thousands of users,