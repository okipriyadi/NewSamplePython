Static files in Django

Finally we will take a closer look at these things we've been calling static files. 
Static files are all your CSS and images. Their content doesn't depend on the request 
context and will be the same for every user.

Where to put static files for Django

As you saw when we ran collectstatic on the server, Django already knows where to find 
the static files for the built-in "admin" app. Now we just need to add some static 
files for our own app, blog.

We do that by creating a folder called static inside the blog app:

djangogirls
├── blog
│   ├── migrations
│   └── static
└── mysite

Django will automatically find any folders called "static" inside any of your apps' folders. 
Then, it will be able to use their contents as static files.

Your first CSS file!

Let's create a CSS file now, to add your own style to your web-page. Create a new directory called css inside your static directory. Then create a new file called blog.css inside this css directory. Ready?

djangogirls
└─── blog
     └─── static
          └─── css
               └─── blog.css
               
Time to write some CSS! Open up the blog/static/css/blog.css file in your code editor.
We won't be going too deep into customizing and learning about CSS here. It's pretty easy and 
you can learn it on your own after this workshop. There is a recommendation for a free course 
to learn more at the end of this page.

But let's do at least a little. Maybe we could change the color of our header? 
h1 a {
    color: #FCA205;
}


Then, we need to also tell our HTML template that we added some CSS. 
Open the blog/templates/blog/post_list.html file and add this line at the very beginning of it:

{% load staticfiles %}
We're just loading static files here :). 
Between the <head> and </head>, after the links to the Bootstrap CSS files add this line:

<link rel="stylesheet" href="{% static 'css/blog.css' %}">
The browser reads the files in the order they're given, so we need to make sure this is in the 
right place. Otherwise the code in our file may override code in Bootstrap files. 
We just told our template where our CSS file is located.

Your file should now look like this:

{% load staticfiles %}
<html>
    <head>
        <title>Django Girls blog</title>
        <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
        <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css">
        <link rel="stylesheet" href="{% static 'css/blog.css' %}">
    </head>
    <body>
        <div>
            <h1><a href="/">Django Girls Blog</a></h1>
        </div>

        {% for post in posts %}
            <div>
                <p>published: {{ post.published_date }}</p>
                <h1><a href="">{{ post.title }}</a></h1>
                <p>{{ post.text|linebreaks }}</p>
            </div>
        {% endfor %}
    </body>
</html>
OK, save the file and refresh the site!

Figure 14.2

Nice work! Maybe we would also like to give our website a little air and increase the margin on the left side? Let's try this!

body {
    padding-left: 15px;
}
Add this to your CSS, save the file and see how it works!

Figure 14.3

Maybe we can customize the font in our header? Paste this into your <head> in blog/templates/blog/post_list.html file:

<link href="http://fonts.googleapis.com/css?family=Lobster&subset=latin,latin-ext" rel="stylesheet" type="text/css">
This line will import a font called Lobster from Google Fonts (https://www.google.com/fonts).

Find the h1 a declaration block (the code between braces { and }) in the CSS file `blog/static/css/blog.css. Now add the line font-family: 'Lobster'; between the braces, and refresh the page:

h1 a {
    color: #FCA205;
    font-family: 'Lobster';
}
Figure 14.3

Great!

As mentioned above, CSS has a concept of classes. These allow you to name a part of the HTML 
code and apply styles only to this part, without affecting other parts. 
This can be super helpful! Maybe you have two divs that are doing something different 
(like your header and your post). A class can help you make them look different.

Go ahead and name some parts of the HTML code. 
Add a class called page-header to your div that contains your header, like this:

<div class="page-header">
    <h1><a href="/">Django Girls Blog</a></h1>
</div>
And now add a class post to your div containing a blog post.

<div class="post">
    <p>published: {{ post.published_date }}</p>
    <h1><a href="">{{ post.title }}</a></h1>
    <p>{{ post.text|linebreaks }}</p>
</div>

We will now add declaration blocks to different selectors. 
Selectors starting with . relate to classes. There are many great tutorials and 
explanations about CSS on the Web to help you understand the following code. 
For now, just copy and paste it into your blog/static/css/blog.css file:

.page-header {
    background-color: #ff9400;
    margin-top: 0;
    padding: 20px 20px 20px 40px;
}

.page-header h1, .page-header h1 a, .page-header h1 a:visited, .page-header h1 a:active {
    color: #ffffff;
    font-size: 36pt;
    text-decoration: none;
}

.content {
    margin-left: 40px;
}

h1, h2, h3, h4 {
    font-family: 'Lobster', cursive;
}

.date {
    float: right;
    color: #828282;
}

.save {
    float: right;
}

.post-form textarea, .post-form input {
    width: 100%;
}

.top-menu, .top-menu:hover, .top-menu:visited {
    color: #ffffff;
    float: right;
    font-size: 26pt;
    margin-right: 20px;
}

.post {
    margin-bottom: 70px;
}

.post h1 a, .post h1 a:visited {
    color: #000000;
}
Then surround the HTML code which displays the posts with declarations of classes. Replace this:

{% for post in posts %}
    <div class="post">
        <p>published: {{ post.published_date }}</p>
        <h1><a href="">{{ post.title }}</a></h1>
        <p>{{ post.text|linebreaks }}</p>
    </div>
{% endfor %}
in the blog/templates/blog/post_list.html with this:

<div class="content container">
    <div class="row">
        <div class="col-md-8">
            {% for post in posts %}
                <div class="post">
                    <div class="date">
                        <p>published: {{ post.published_date }}</p>
                    </div>
                    <h1><a href="">{{ post.title }}</a></h1>
                    <p>{{ post.text|linebreaks }}</p>
                </div>
            {% endfor %}
        </div>
    </div>
</div>
Save those files and refresh your website.

Figure 14.4

Woohoo! Looks awesome, right? Look at the code we just pasted to find the places where we added classes in the HTML and used them in the CSS. Where would you make the change if you wanted the date to be turquoise?

Don't be afraid to tinker with this CSS a little bit and try to change some things. Playing with the CSS can help you understand what the different things are doing. If you break something, don't worry, you can always undo it!

We really recommend taking this free online Codeacademy HTML & CSS course. It can help you learn all about making your websites prettier with CSS.

Ready for the next chapter?! :)