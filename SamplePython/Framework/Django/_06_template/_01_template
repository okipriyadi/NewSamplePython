==============================================================================+
{% load staticfiles %}
<!DOCTYPE html>
<html>
<head>
	<title>{% block title %}{% endblock %}</title>
	<link href="{% static "css/blog.css" %}" rel="stylesheet">
</head>
<body>
	<div id="content">
		{% block content %}
		{% endblock %}
		</div>
		<div id="sidebar">
			<h2>My blog</h2>
		<p>This is my blog.</p>
	</div>
</body>
</html>
==============================================================================+
{% load staticfiles %} tells Django to load the staticfiles template tags
that are provided by the django.contrib.staticfiles application. After loading
it, you are able to use the {% static %} template filter throughout this template.
With this template filter, you can include static files such as the blog.css file that
you will find in the code of this example, under the static/ directory of the blog
application. Copy this directory into the same location of your project to use the
existing static files.
You can see that there are two {% block %} tags. These tell Django that we want to
define a block in that area. Templates that inherit from this template can fill the blocks
with content. We have defined a block called title and a block called content .
Let's edit the post/list.html file and make it look like the following:


==============================================================================+
{% extends "blog/base.html" %}
{% block title %}My Blog{% endblock %}
{% block content %}
<h1>MyBlog</h1>
{% for post in posts %}
	<h2>
		<a href="{{ post.get_absolute_url }}">
			{{ post.title }}
		</a>
	</h2>
	<p class="date">
		Published {{ post.publish }} by {{ post.author }}
	</p>
	{{ post.body|truncatewords:30|linebreaks }}
{% endfor %}
{% endblock %}
==============================================================================+
we are applying two template filters: truncatewords truncates the
value to the number of words specified, and linebreaks converts the output into
HTML line breaks. You can concatenate as many template filters as you wish; each
one will be applied to the output generated by the previous one.


With the {% extends %} template tag, we are telling Django to inherit from the
blog/base.html template. Then we are filling the title and content blocks of the
base template with content. We iterate through the posts and display their title, date,
author, and body, including a link in the title to the canonical URL of the post. In the
body of the post, we are applying two template filters: truncatewords truncates the
value to the number of words specified, and linebreaks converts the output into
HTML line breaks. You can concatenate as many template filters as you wish; each
one will be applied to the output generated by the previous one.