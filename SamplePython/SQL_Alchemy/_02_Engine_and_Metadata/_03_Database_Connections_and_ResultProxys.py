"""
Although the Engine is the normal method of performing database operations, SQLAlchemy 
does make the lower-level Connection object available through the connect ()
method on the engine, as shown in the following example:
"""
from sqlalchemy import engine
conn = engine.connect()
result = conn.execute('select user_name, email_address from tf_user')
for row in result:
    print 'User name: %s Email address: %s' % (row['user_name'], row['email_address'])

conn.close()

"""
The Connection object is actually an instance of the sqlalchemy.engine.Connection
class, which serves as a proxy for the particular DB-API connection object. The
result object is an instance of the sqlalchemy.engine.ResultProxy class, which has
many features in common with a database cursor.

Both Engines and Connections are implementations of the Connectable interface, which
has two important methods: connect ( ), which in the case of a Connection simply returns
itself, and execute ( ), which executes some SQL and generates a ResultProxy . Most
SQLAlchemy functions that therefore take an Engine as a parameter (usually named
bind ) can also take a Connection , and vice versa

The ResultProxy object has several useful methods and attributes for returning infor-
mation about the query:

__iter__( )
Allows iteration over a result proxy, generating RowProxy objects
fetchone( )
Fetches the next RowProxy object from the ResultProxy
fetchall( )
Fetches all RowProxy objects at once
scalar( )
Fetches the next row from the cursor and treat it as a scalar (i.e. not a RowProxy )
keys
List of the column names in the result set
rowcount
The total number of rows in the result set
close( )
Closes the ResultProxy , possibly returning the underlying Connection to the pool
The RowProxy object generated by the ResultProxy provides several useful methods that
allow you to retrieve data, such as a tuple, dictionary, or object:
__getattr__( )
Provides access to data via object. column name
__getitem__( )
Provides access to data via object [ column name ] or object [ column position ]
keys( )
Provides a list of all the column names in the row
values( )
Provides a list of all the values in the row
items( )
Provides a list of (column name, value) tuples for the row
"""

