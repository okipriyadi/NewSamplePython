"""
Using SSL in Twisted requires that you have pyOpenSSL installed. A quick test to verify that you do is to run from OpenSSL import SSL at a python prompt and not get an error.

SSL connections require SSL contexts. These contexts are generated by a ContextFactory that maintains state like the SSL method, private key file name, and certificate file name.

Instead of using listenTCP and connectTCP to create a connection, use listenSSL and connectSSL for a server and client respectively. These methods take a contextFactory as an additional argument.

The server context factory is twisted.internet.ssl.DefaultOpenSSLContextFactory

Untuk testing gunakan client atau bisa juga menggunakan perintah berikut:
openssl s_client -connect 172.16.191.17:8000 -cert occ_ground.crt  -key occ_ground.key
"""

from twisted.internet import ssl, reactor
from twisted.internet.protocol import Factory, Protocol

class SBDAPIFactory(Factory):
    def __init__(self):
        print "========== Starting SBD API handler at port ==========" 

    def buildProtocol(self, addr):
        return Echo()

    def __del__(self):
        print "========== Stopping SBD API handler =========="


class Echo(Protocol):
    def connectionMade(self):
        print "==========connection made============"
    
    def dataReceived(self, data):
        """As soon as any data is received, write it back."""
        print "data received: ", data
        self.transport.write(("dari server :" + data))

if __name__ == '__main__':

    reactor.listenSSL(8000, SBDAPIFactory(), ssl.DefaultOpenSSLContextFactory('igg.key', 'igg.crt'))
    reactor.run()